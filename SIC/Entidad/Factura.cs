//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace shanuMVCUserRoles.Entidad
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using static shanuMVCUserRoles.Entidad.DetalleFactura;

    public partial class Factura
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Factura()
        {
            this.DetalleFactura = new HashSet<DetalleFactura>();
            this.PagoFactura = new HashSet<PagoFactura>();
        }
    
        public int IdFactura { get; set; }
        public string Cliente { get; set; }
        public double SubTotal { get; set; }
        public decimal GranTotal { get; set; }
        public System.DateTime Fecha { get; set; }
        public double Descuento { get; set; }
        public int IdVendedor { get; set; }
        public string NumFactura { get; set; }
        public double TasaCambio { get; set; }
        public bool Anulado { get; set; }
        public double IVA { get; set; }
        public int IdSucursal { get; set; }
    
        public virtual Cliente cliente { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<DetalleFactura> DetalleFactura { get; set; }
        public virtual Sucursal Sucursal { get; set; }
        public virtual Vendedor Vendedor { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PagoFactura> PagoFactura { get; set; }


        #region ViewModels
        public class FacturaViewModel
        {
            #region Cabecera
            public string Cliente { get; set; }
            public int CabeceraProductoId { get; set; }
            public string CabeceraProductoSku { get; set; }
            public int CabeceraProductoCantidad { get; set; }
            public decimal CabeceraProductoPrecio { get; set; }
            #endregion

            #region Contenido
            public List<DetalleFacturaViewModel> DetalleFactura { get; set; }
            #endregion

            #region Pie
            public decimal Total()
            {
                return DetalleFactura.Sum(x => x.Monto());
            }
            public DateTime Fecha { get; set; }
            #endregion

            public FacturaViewModel()
            {
                DetalleFactura = new List<DetalleFacturaViewModel>();
                Refrescar();
            }

            public void Refrescar()
            {
                CabeceraProductoId = 0;
                CabeceraProductoSku = null;
                CabeceraProductoCantidad = 1;
                CabeceraProductoPrecio = 0;
            }

            public bool SeAgregoUnProductoValido()
            {
                return !(CabeceraProductoId == 0 || string.IsNullOrEmpty(CabeceraProductoSku) || CabeceraProductoCantidad == 0 || CabeceraProductoPrecio == 0);
            }

            public bool ExisteEnDetalle(string sku)
            {
                return DetalleFactura.Any(x => x.Sku == sku);
            }

            public void RetirarItemDeDetalle()
            {
                if (DetalleFactura.Count > 0)
                {
                    var detalleARetirar = DetalleFactura.Where(x => x.Retirar)
                                                            .SingleOrDefault();

                    DetalleFactura.Remove(detalleARetirar);
                }
            }

            public void AgregarItemADetalle()
            {
                DetalleFactura.Add(new DetalleFacturaViewModel
                {
                    Sku = CabeceraProductoSku,
                    
                    Precio = CabeceraProductoPrecio,
                    Cantidad = CabeceraProductoCantidad,
                });

                Refrescar();
            }

            public Factura ToModel()
            {
                var factura = new Factura();
                factura.Cliente = this.Cliente;
                factura.Fecha = DateTime.Now;
                factura.GranTotal = this.Total();

                foreach (var d in DetalleFactura)
                {
                    factura.DetalleFactura.Add(new DetalleFactura
                    {
                        Sku = d.Sku,
                        Total = d.Monto(),
                        Precio = d.Precio,
                        Cantidad = d.Cantidad
                    });
                }

                return factura;
            }
        }
        #endregion
    }
}
